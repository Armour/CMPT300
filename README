# --------------------------------------------------------------------------- #
#                                                                             #
#     /$$                               /$$       /$$                 /$$     #
#    | $$                              | $$      |__/                | $$     #
#    | $$ /$$   /$$  /$$$$$$   /$$$$$$ | $$$$$$$  /$$  /$$$$$$   /$$$$$$$     #
#    | $$| $$  | $$ /$$__  $$ /$$__  $$| $$__  $$| $$ /$$__  $$ /$$__  $$     #
#    | $$| $$  | $$| $$  \__/| $$$$$$$$| $$  \ $$| $$| $$  \__/| $$  | $$     #
#    | $$| $$  | $$| $$      | $$_____/| $$  | $$| $$| $$      | $$  | $$     #
#    | $$|  $$$$$$$| $$      |  $$$$$$$| $$$$$$$/| $$| $$      |  $$$$$$$     #
#    |__/ \____  $$|__/       \_______/|_______/ |__/|__/       \_______/     #
#         /$$  | $$                                                           #
#        |  $$$$$$/                                                           #
#         \______/                                                            #
#                                                                             #
# --------------------------------------------------------------------------- #

---

## Author Information
*  Name            : Guo Chong
*  Student ID      : 301295753
*  SFU username    : armourg
*  Lecture section : D1
*  Instructor      : Brain G.Booth
*  TA              : Scott Kristjanson

## Description
This program aims to decrypt large numbers of encrypted tweets, to speed up and take advantages of multiple CPU cores, we use fork function to spread the decryption task across multiple processes and use pipes to pass messages between the parent processor and child processors with two different scheduling algorithm "round robin" and "first come first serve".
Same as before, each tweetâ€™s decryption follow four steps below:
1. Remove unnecessary characters in regular interval.
2. Transform each group of 6 characters into an integer using base 41.
3. Map each cipher number onto a similar plain-text number.
4. Get the final decrypted text by use the inverse function of Step 2.
More Details can be found in [Assignment 2 - Process Management](https://courses.cs.sfu.ca/2015fa-cmpt-300-d1/pages/AssignmentThree/view)

## Project Structure
* "lyrebird.c"   : contains the main loop function which using fork function to create child processes to do the decryption for each tweet file.
* "decrypt.c"    : contains a decrypt function, which go through 4 steps and in each step it call some functions in dec_func.c to handle decryption.
* "dec_func.c"   : contains many functions that used to decrypt the tweet, like remove extra characters, mapping characters to integer value and mapping integer to characters.
* "pipe.c"       : contains many functions that related to pipe including initialize pipe, close pipe and select pipe.
* "scheduling.c" : contains two functions, each contains a scheduing algorithm that used to assign tasks to child processors in parent processor.
* "line_io.c"    : contains two functions, input one line data from file and output one line data to file
* "memwatch.c"   : mainly used for detecting un-freed memory, overflow and underflow to memory buffers.

## How to use
1. Unzip all the file into one folder and cd into that folder.
2. Run command "make", you will see all the source file been compiled and linked.
3. Run command "./lyrebird config_file_name".
    (e.g. "./lyrebird config_file.txt")
4. You can run command "make clean" to remove all intermediate files.

## Robustness
* Check the number of command line parameters.
* Check whether the input and output file exist or not.
* Check whether the tweet is multiple of 6 after removing extra characters.
* Dynamic manage memory and guarantee to free all when program finished (also checked malloc function to see if it failed).
* Parent process wait until all his child processers finished before exit.
* Close all pipes that do not need in each processors.
* Empty data and largest data tested (used data set from assignment #2).

